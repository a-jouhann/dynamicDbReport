@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@implements IDialogContentComponent

<div>
    <FluentDesignTheme @ref=_theme
                       @bind-Mode="@Mode"
                       @bind-OfficeColor="@OfficeColor"
                       StorageName="theme" />

    <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
        <FluentSelect Label="Theme"
                      Width="100%"
                      Style="margin-bottom: 30px;"
                      Items="@AllModes"
                      @bind-SelectedOption="@Mode" />

        <FluentSelect Label="Color"
                      Style="margin-bottom: 30px;"
                      Width="100%"
                      Items="@(OfficeColorUtilities.AllColors.Cast<OfficeColor?>())"
                      Height="200px"
                      @bind-SelectedOption="@OfficeColor">
            <OptionTemplate>
                <FluentStack>
                    <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                Color="Color.Custom"
                                CustomColor="@GetCustomColor(@context)" />
                    <FluentLabel>@context</FluentLabel>
                </FluentStack>
            </OptionTemplate>
        </FluentSelect>

        <FluentDivider Style="width: 100%; margin: 1rem 0" />
        <FluentPopover Style="width: 350px;" AnchorId="info" FixedPlacement="true" @bind-Open="@_popVisible">
            <Header>Reset site settings</Header>
        </FluentPopover>

        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentButton OnClick="@ResetSiteAsync">Reset settings</FluentButton>
            <FluentIcon Id="info" Value="@(new Icons.Regular.Size24.Info())" OnClick="@(() => _popVisible = !_popVisible)" />
        </FluentStack>

        <p style="margin-top: 1rem;">
            <em><strong>@_status</strong></em>
        </p>
    </FluentStack>
</div>



@code{
    private string? _status;
    private bool _popVisible;
    private bool _ltr = true;
    private FluentDesignTheme? _theme;

    [Inject] public required GlobalState GlobalState { get; set; }

    public DesignThemeModes Mode { get; set; }

    public OfficeColor? OfficeColor { get; set; }


    private static IEnumerable<DesignThemeModes> AllModes => Enum.GetValues<DesignThemeModes>();

    private static IEnumerable<OfficeColor?> AllOfficeColors
    {
        get
        {
            return Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i);
        }
    }

    private void ResetSiteAsync()
    {
        _theme?.ClearLocalStorageAsync();
        OfficeColor = OfficeColorUtilities.GetRandom();
        Mode = DesignThemeModes.System;
    }

    private static string? GetCustomColor(OfficeColor? color)
    {
        return color switch
        {
            null => OfficeColorUtilities.GetRandom(true).ToAttributeValue(),
            Microsoft.FluentUI.AspNetCore.Components.OfficeColor.Default => "#036ac4",
            _ => color.ToAttributeValue(),
        };

    }
}