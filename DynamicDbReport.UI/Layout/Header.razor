@implements IDisposable

@using DynamicDbReport.DTO.Models.SQLModels
@using DynamicDbReport.DTO.Shared
@using DynamicDbReport.UI.PrivateServices
@inject ILocalStorageService localStorage
@inject IMessageService messageService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject HttpClientHelper http
@inject IToastService toast
@inject IDialogService DialogService


<FluentHeader Class="siteheader">
    <FluentNavLink Href="/">
        <FluentPersona Name="@(loginData.Engine == EngineName.None ? "Not connected" : $"{loginData.Engine.ToString()} - {loginData.ServerAddress}({loginData.Username})")"
                       Status="@(loginData.Engine == EngineName.None? PresenceStatus.Unknown: PresenceStatus.Available)"
                       StatusSize="PresenceBadgeSize.Tiny"
                       Image="/icon-192.png"
                       ImageSize="32px">
        </FluentPersona>
    </FluentNavLink>
    <FluentSpacer />

    <AuthorizeView>
        <Authorized>
            @*  <FluentMenuButton ButtonAppearance="@Appearance.Neutral" Id="connectionSelector" Text="@(??"Select DB")" Items="@dbNames" OnMenuChanged="ChangeDB"></FluentMenuButton> *@
            <FluentSelect TOption="string" Items="dbNames" Width="95px" OptionText="@(i => i)" OptionValue="@(i => i)" Multiple="false" SelectedOption="loginData.DbName" ValueChanged="ChangeDB" />

            <FluentButton Style="margin-left: 5px" OnClick="ChangeConnection" Title="Change connection"><FluentIcon Value="@(new Icons.Regular.Size20.Connector())" Color="Color.Neutral" Title="Change connection" /></FluentButton>
            <FluentButton Style="margin-left: 5px" OnClick="OpenSiteSettingsAsync" Title="Settings"><FluentIcon Value="@(new Icons.Regular.Size20.Settings())" Color="Color.Neutral" Title="Settings" /></FluentButton>
        </Authorized>
    </AuthorizeView>

</FluentHeader>


@code {
    List<string> dbNames = [];
    CredentialRequest loginData = new();
    private IDialogReference _dialog;

    protected override async Task OnInitializedAsync()
    {
        messageService.OnMessageItemsUpdated += UpdateData;
        await CheckToUpdate();
    }

    private async Task CheckToUpdate()
    {
        if (await localStorage.ContainKeyAsync("dbMember"))
        {
            loginData = await localStorage.GetItemAsync<CredentialRequest>("dbMember");
        }
        await FetchDbList();

        StateHasChanged();
    }

    private async Task FetchDbList()
    {
        var fetchData = await http.HttpClientReceiveAsync<DatabaseNameListResponse>(HttpMethod.Post, "SQLFunctions/DBNameList", loginData.ToJsonString());
        if (fetchData?.ResponseData is null || !fetchData.SuccessAction || fetchData.ResponseData.Count == 0)
        {
            toast.ShowError(fetchData?.ErrorException?.ErrorMessage ?? "Cannot fetch dbs");
            return;
        }

        dbNames = fetchData.ResponseData;
    }

    private async Task ChangeDB(string db)
    {
        loginData.DbName = db;
        await localStorage.SetItemAsync("dbMember", loginData);
    }

    private async Task ChangeConnection()
    {
        loginData = new();
        await ((PrivateServices.CustomAuthentication)_authenticationStateProvider).MarkUserAsLoggedOut();
        _navigationManager.NavigateTo("/Auth/Login");
    }

    public void Dispose()
    {
        messageService.OnMessageItemsUpdated -= UpdateData;
    }

    private void UpdateData()
    {
        CheckToUpdate();
        InvokeAsync(StateHasChanged);
    }

    private async Task OpenSiteSettingsAsync()
    {
        _dialog = await DialogService.ShowPanelAsync<Settings>(new DialogParameters()
            {
                ShowTitle = true,
                Title = "Site settings",
                Alignment = HorizontalAlignment.Right,
                PrimaryAction = "OK",
                SecondaryAction = null,
                ShowDismiss = true
            });

        DialogResult result = await _dialog.Result;
    }

}