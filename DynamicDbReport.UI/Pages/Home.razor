@page "/"
@using DynamicDbReport.DTO.Models.SQLModels
@using DynamicDbReport.DTO.Shared
@using DynamicDbReport.UI.PrivateServices

@attribute [Authorize]
@inject IToastService toast
@inject ILocalStorageService localStorage

<PageTitle>@App.ApplicationTitle("Home")</PageTitle>


<div style="width:100%">
    <FluentToolbar style="width:100%">
        <FluentButton Style="margin: 0 5px" Title="Open script"><FluentIcon Value="@(new Icons.Regular.Size20.OpenFolder())" Color="Color.Accent" Title="Open script" /></FluentButton>

        <FluentButton Style="margin: 0 5px" Title="Save As.."><FluentIcon Value="@(new Icons.Regular.Size20.Save())" Color="Color.Accent" Title="Save As.." /></FluentButton>

        <FluentDivider Style="height: 50px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size20.Send())" Disabled="_processing" OnClick="ExecuteScripts">@(_processing ? "Executing..." : "Execute")</FluentButton>
        <FluentCheckbox @bind-Value="executeScript.NoCount" Label="No Count" />

        <FluentDivider Style="height: 50px;" Role="DividerRole.Presentation" Orientation="Orientation.Vertical"></FluentDivider>

        <FluentRadioGroup @bind-Value=showAsGrid TValue="bool">
            <FluentRadio Value="true">Grid</FluentRadio>
            <FluentRadio Value="false">Text</FluentRadio>
        </FluentRadioGroup>
    </FluentToolbar>
</div>


<FluentSplitter Orientation="@Orientation.Vertical" BarSize="6" Panel1MinSize="20%" Panel2MinSize="20%" Style="height:100%;width:100%;">
    <Panel1>
        <FluentTextArea Appearance="FluentInputAppearance.Filled" Rows="25" @bind-Value=executeScript.QueryToExecute style="width: 100%;max-height:100%;min-height:100%;"></FluentTextArea>
    </Panel1>
    <Panel2>
        <FluentTabs ShowActiveIndicator=false ActiveTabId="@selectedTab">

            <FluentTab Id="TabTwo" Label="Results">
                @if (hasResult)
                {
                    <FluentDataGrid Id="manualGrid" GenerateHeader=GenerateHeaderOption.None GridTemplateColumns="1fr 1fr" TGridItem="string" role="grid">
                        <FluentDataGridRow RowType="DataGridRowType.Header">
                            <FluentDataGridCell GridColumn=1 CellType="DataGridCellType.ColumnHeader">Column 1</FluentDataGridCell>
                            <FluentDataGridCell GridColumn=2 CellType="DataGridCellType.ColumnHeader">Column 2</FluentDataGridCell>
                        </FluentDataGridRow>
                        <FluentDataGridRow>
                            <FluentDataGridCell GridColumn=1>1.1</FluentDataGridCell>
                            <FluentDataGridCell GridColumn=2>1.2</FluentDataGridCell>
                        </FluentDataGridRow>
                        <FluentDataGridRow>
                            <FluentDataGridCell GridColumn=1>2.1</FluentDataGridCell>
                            <FluentDataGridCell GridColumn=2> 2.2</FluentDataGridCell>
                        </FluentDataGridRow>
                    </FluentDataGrid>

                }
            </FluentTab>


            <FluentTab Id="TabOne" Label="Messages">
                @executeRespones.ResponseData.ResponesMessage
            </FluentTab>
        </FluentTabs>
    </Panel2>
</FluentSplitter>




@code {

    [Inject] private HttpClientHelper http { get; set; }

    bool showAsGrid = true;
    bool hasResult = false;
    bool _processing = false;
    string selectedTab = "TabOne";
    private ExecuteScriptRequest executeScript;
    private ExecuteScriptResponse executeRespones;
    protected override void OnInitialized()
    {
        executeScript = new();
        executeRespones = new() { ResponseData = new() { Columns = [], Rows = [] } };
    }

    private async Task ExecuteScripts()
    {
        if (string.IsNullOrEmpty(executeScript.QueryToExecute) || executeScript.QueryToExecute == "")
        {
            toast.ShowError("No query to execute");
            return;
        }

        if (!await localStorage.ContainKeyAsync("dbMember"))
        {
            toast.ShowError("Login again");
            return;
        }
        executeScript.Credential = await localStorage.GetItemAsync<CredentialRequest>("dbMember");

        if (executeScript?.Credential is null || string.IsNullOrEmpty(executeScript.Credential.DbName) || executeScript.Credential.DbName == "")
        {
            toast.ShowError("Select DB first");
            return;
        }

        _processing = true;
        executeRespones = await http.HttpClientReceiveAsync<ExecuteScriptResponse>(HttpMethod.Post, "SQLFunctions/ExecuteScript", executeScript.ToJsonString());
        _processing = false;

        if (executeRespones?.ResponseData?.Columns is null || executeRespones.ErrorException is not null || !executeRespones.SuccessAction)
        {
            toast.ShowError(executeRespones?.ErrorException?.ErrorMessage ?? "Cannot connect to server");
            return;
        }

        hasResult = true;
        selectedTab = "TabTwo";

        StateHasChanged();
    }




}